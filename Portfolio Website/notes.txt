(1) What is the purpose of the else statement in a if-else statement in C Programming?

The purpose of the else statement in an if-else statement is all about execution. An if-else statement is essentially runs a code block regarding what specific condition we applied. For example, we set a condition in an 'If-statement' and run the program. In this case, two scenarios can unfold: either the program will run and be executed in the first step. In the latter case, the else condition will run because it doesn't meet the requirement of that condition. So, the else condition will run and execute. That is the purpose of the else statement in an if-else statement.

(2) In C-Programming, Pre-defined or library functions are provided by C standard library such as "printf" and "scanf". Plus, Compilar aleady knows how to use them. On the otherhand, user-defined functions are crafted by a programmer. These functions are prepared by programmar to make the program organized and easy to reuse. Both types of functions contribute regarding their purposes and needs in C programs.

(3) Array is use to store multiple values in a single variable that is said to be an Array. It is also called Single Dimension Array.

A Multi-Dimension Array is basically an array of Arrays. The most common type of Multi-Dimension Array is 2D-Dimensional Array, which is like matrix with rows and columns.

Declaration:

Declaration it will be like:

The generation syntax of 2D-Dimensional Array is:

data_type array_name[number_of_rows][number_of_columns];


Initialization:

Initialization it will be like:

int data[2][3] = { [1 2 3, 4 5 6] };


Accessed:

To accessed elements in a multidimensional array it will be like:

int element = data[1][3];


Complete Example:

#include <stdio.h>

int main() {

	// Declaration And Initialization
	int matrix[3][3] = {[1 2 3, 4 5 6, 7 8 9]};

	// Access and print
	printf("Element at matrix[1][2] is %d", matrix[1][2]);

	return 0;

}

(4) What are variables and constants in C language with some exmaples?

Variables are containers to store data values. Data values are like numbers or characters.

In C, there are different types of data types mainly "int, float, char" for example.

1: int - Store data values in integer without decimal such as 12, 132, -421 etc.
2: float = Store data values in floating point with decimal such as 12.423, 56.323 etc.
3: char = Store single characters such as "a", "b" and "c" etc.

In C, Constant is reprented by const. Constant is also a variable but in this variable you can't change existing value. Like you can declare value only once not twice like variables.

Declaration Example For Variable:

For Variables:

int integerNum = 20;
float floatNum = 20.59;
char charaA = 'D';

printf(%d\n, integerNum);
printf(%f\n, floatNum);
printf(%c, charaA);

Declaration Example For Contant:

const int integerNum = 20;
printf(%d\n, integerNum);

If i rewrite it's value like:

int integerNum = 19;

It will give you an error due to const functionality.


(5) Definitions:

(i) Compilar: Compilar is a software tool that translates source code of high level programming languages (C, C++) into machine code or intermediate code. This process is also known as compilation and output result is usually an executable file that can be run on a computer.

(ii) Interpreter: Interpreter is a program that is directly execute source code in high level programming language. It translates and execute code line by line without generating a seperate machine code file. Interpreters are often used in scripting languages like JavaScript or Python.

(iii) Assembler: Assembler is a program that converts assembly language code into machine code or an executable code. Assembly language is a low level programming language that is a specific to a particular computer architecture and an assembler helps in translating into machine code.

(iv) Pointers: Pointers are variables that store memory location of another variable. Pointer variable points to a data type like (int or float) of the same type, and is created with * operator.

Example: int myNum = 23;
	 int *ptr = &myNum;

(v) Variables: In C-Language , variables are used to store numbers and characters. There are different types of variables like (int, float, chars) where int is use for integers without decimal points, float stores floating point with decimal and chars stores single characters like "C","E","D" etc.

And it's declaration is like:

int integer = 12;
float floatingpoint = 12.523;
char character = 'D';

(v) Keywords: Keywords in programming languages are reserved words that have predefined meanings and can't be used as identifiers (variable or function names). Examples in C Language that is 'int', 'const', 'if', 'return' etc.

(vi) Strings: Strings are used to store and manipulate textual data in program. Basically, it's an array of characters. It is represented in between double quotes like 'Text' or "Text".

Declaration is like:

char str[] = "this is text";
printf('The length of string is', str);


Q: Write Purpose, Syntax and at least one working example to show:

(a): printf: printf is a function in C language that displays a message on a screen for a particular piece of code.

syntax: printf("Text", variable_1, variable_2);

(b): scanf: scanf is a function in C Language that takes information from the user during runtime, making the program interactive and capable of handling user input.

syntax: scanf("Text + Format Specifier", variable_1, variable_2);

(c): gets: gets is a function in C language that read the line of text from the standard input and stores it as a string.

syntax: char *gets(char *str);

(d): goto: goto is a feature in C language that allows the program to jump directly to a specific part of the code.

syntax: goto label;

Parameters are variables or values passed into a function to operate it on specific data.

Pass by value: The copy of actual arguments is passed to respective formal arguments. Both types of parameters are stored in different memory location. In function it doesn't effect any changes on that actual parameter values where they stored.

Pass by reference: Both actual and formal parameters refer to same memory location. And any changes made are reflected in actual parameter of caller.

In C Language, parameters are always passed by the value. If you are passing parameters by reference we make use of pointers.


#include <stdio.h>

int squareNum (int num) {

    num = num * num;
    printf("Inside Function value is", num);
}

int main () {

    int sqrtNum = 2;

    squareNum(sqrtNum);
    printf("Square Of %d is", squareNum);

    return 0;
}



---------------------------------------------------
#include <stdio.h>

void fun(int x, float y) {
    x = 10;
    y = 20.0623;
    printf("Inside function value of x = %d, y = %f\n", x, y);
}

int main() {

    int x1 = 20;
    float y1 = 24.6323;

    // Call the function with addresses of x and y
    fun(x1, y1);

    printf("Outside function value of x = %d, y = %f\n", x1, y1);

    return 0;
}





#include <stdio.h>

int sqrtNum(int num) {
    num = num * num;
    printf("Inside function value is %d", num);

    return 0;
};

int main () {
    int x = 5;
    sqrtNum(x);
    printf("Outside function value is %d", x);

    return 0;
};

---------------

int sqrtNum(int *num) {
    *num = (*num) * (*num);
    printf("Inside function value is %d", num);

    return 0;
};

int main () {
    int x = 5;
    sqrtNum(&x);
    printf("Outside function value is %d", x);

    return 0;
};